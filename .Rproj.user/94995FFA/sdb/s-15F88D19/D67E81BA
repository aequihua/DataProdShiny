{
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n# \n# http://www.rstudio.com/shiny/\n#\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(gridExtra)\n\nshinyServer(function(input, output) {\n\n  output$smPlot <- renderPlot({\n    # Extract the variables from the input\n    lambda <- input$lambda\n    muexp <- 1 / lambda\n    sdexp <- 1 / lambda\n    nosim <- round(input$sims)\n    n <- input$n\n\n    # Produce the density distribution of the sample mean\n    Xbardat <- data.frame(\n      x = c(apply(matrix(rexp(nosim*n,lambda), \n                         nosim), 1, mean)\n      ),\n      size = factor(rep(c(n), rep(nosim, 1))))    \n    g1 <- ggplot(Xbardat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = \"black\", aes(y = ..density..)) \n    g1 <- g1+ geom_density(alpha=.2, fill=\"#FF6666\")\n    g1 <- g1 + geom_vline(xintercept=muexp,  \n                          color=\"red\", linetype=\"dashed\", size=1)\n    g1 <- g1 + ggtitle(\"Sample Mean - Density Chart\")\n    g1 <- g1 + labs(x = \"Sample Mean\", y = \"Density\")\n    g1 + facet_grid(. ~ size)\n    print(g1)\n  })\n  \n  output$distPlot <- renderPlot({\n    # Extract the variables from the input\n    lambda <- input$lambda\n    muexp <- 1 / lambda\n    sdexp <- 1 / lambda\n    nosim <- round(input$sims)\n    n <- input$n\n    \n    # Produce the normalized distribution of the sample mean (CLT)\n    cfunc <- function(x, n) sqrt(n) * (mean(x) - muexp) / sdexp\n    XbarNormdat <- data.frame(\n      x = c(apply(matrix(rexp(nosim*n,lambda), \n                         nosim), 1, cfunc, n)\n      ),\n      size = factor(rep(c(n), rep(nosim, 1))))\n    g2 <- ggplot(XbarNormdat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = \"black\", aes(y = ..density..)) \n    g2 <- g2 + labs(x = \"Number of simulations\", y = \"Normal Density\")\n    g2 <- g2 + ggtitle(\"Sample Mean - Normalized Density\")\n    g2 <- g2 + stat_function(fun = dnorm, size = 2) + facet_grid(. ~ size)  \n    \n    print(g2)    \n  })\n  \n  output$document <- renderUI({\n    lin1 = paste(\"<h1>My Shiny Application – Central Limit Theorem Showcase</h1>\")\n    lin2 = \"<p class=MsoNormal>This demo application is inspired in the Statistical\nInference topic, and is used to demonstrate how a given probability\ndistribution (in this case the exponential distribution) has the following\nproperties:</p>\"\n    lin3 = \"<ul><li><p> The <b style='mso-bidi-font-weight:normal'>sample\nmean</b> (X-bar) for a certain <b style='mso-bidi-font-weight:normal'>sample\nsize n</b>, is a good estimator of the population mean (in an exponential\ndistribution, the population mean is equal to <b style='mso-bidi-font-weight:\nnormal'>1 / lambda</b>).</p>\"\n    lin4 =\"<li><p>The sample mean, when converted to normal\nstandard values (that is, by calculating <b style='mso-bidi-font-weight:normal'>X-bar\n– mu / sigma / <span class=SpellE><span class=GramE>sqrt</span></span><span\nclass=GramE>(</span>n)</b> for each sample ) , will converge to the standard normal\ndistribution. This will be more notorious as the sample size (n) goes larger.</p>\n\"\n    lin5 = \"<li><p>As the sample size, and/or the number of samples\n(simulations) grow, the density distribution of the sample mean will converge\nmore to the population <span class=GramE>mean, that</span> is, the histogram\nwill be more “thin” and concentrated around the mean.</p></ul>\"\n    \n    lin6=\"<p>To see this, use the sliders on the left side to select the\ndesired values of lambda (the exponential distribution “rate” parameter), the\nnumber of simulations and the sample size. The resulting plots should be\nconsistent with the principles described above.</p>\"\n    \n    HTML(paste(lin1,lin2,lin3,lin4,lin5,lin6, sep = '<br/>'))     \n  })\n  \n})\n",
    "created" : 1429409143049.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2056651634",
    "id" : "D67E81BA",
    "lastKnownWriteTime" : 1429466184,
    "path" : "~/GitHub/DataProdShiny/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}